<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python3 ssh 傳檔案</title>
    <link href="/2022/04/05/python3-ssh-%E5%82%B3%E6%AA%94%E6%A1%88/"/>
    <url>/2022/04/05/python3-ssh-%E5%82%B3%E6%AA%94%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>本地這邊需要安裝 openssh-client<br>伺服器那邊需要安裝 openssh-server</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="從本地傳到遠端"><a href="#從本地傳到遠端" class="headerlink" title="從本地傳到遠端"></a>從本地傳到遠端</h3><p>$ scp 要傳的檔案 遠端的帳號@遠端的位置(可以是ip，也可以是網址):遠端要傳檔案的資料夾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">     $  scp FileName <span class="hljs-string">&quot;User&quot;</span>@server:server-location/ &#123;enter&#125;<br></code></pre></td></tr></table></figure><p>EX : 以limiu的使用者身份把當前目錄下的*(所有檔案)傳到203.64.125.XX伺服器中的&#x2F;home&#x2F;limiu&#x2F;資料夾位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  scp ./* <span class="hljs-string">&quot;limiu&quot;</span>@203.64.125.XX:/home/limiu/ &#123;enter&#125;<br></code></pre></td></tr></table></figure><p>PS : 輸入後如果遠端的帳號有密碼會要求您輸入。<br>User那邊的雙引號可加可不加(如果您的帳號沒有順殊字元的話。</p><h3 id="從遠端傳到本地"><a href="#從遠端傳到本地" class="headerlink" title="從遠端傳到本地"></a>從遠端傳到本地</h3><p>$ scp 遠端的帳號@遠端的位置(可以是ip，也可以是網址):遠端要傳的檔案 傳回來的資料夾位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  scp <span class="hljs-string">&quot;User&quot;</span>@server:server-location/FileName local-location/ &#123;enter&#125;<br></code></pre></td></tr></table></figure><p>EX : 以limiu的使用者身份把203.64.125.XX伺服器中的&#x2F;home&#x2F;limiu&#x2F;這個位置下的*(所有東西)下載到本地端的.(當前目錄)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  scp <span class="hljs-string">&quot;limiu&quot;</span>@203.64.125.XX:/home/limiu/* . &#123;enter&#125;<br></code></pre></td></tr></table></figure><p>PS : 輸入後如果遠端的帳號有密碼會要求您輸入。<br>User那邊的雙引號可加可不加(如果您的帳號沒有順殊字元的話。</p><h2 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h2><p>如果遠端(伺服器)不是使用預設的Port可以加入 -P 參數。 EX:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  scp -P 1234 FileName <span class="hljs-string">&quot;User&quot;</span>@server:server-location/ &#123;enter&#125;<br></code></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://blog.skynimo.com/blog/post/325025436-scp---ssh-%E7%9A%84%E9%81%A0%E7%AB%AF%E6%AA%94%E6%A1%88%E5%82%B3%E8%BC%B8%E6%8C%87%E4%BB%A4">Nimo的成長大海-ssh的遠端檔案傳輸指令</a></p>]]></content>
    
    
    <categories>
      
      <category>Environment stuff</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algo-Greedy</title>
    <link href="/2021/11/16/Algo-Greedy/"/>
    <url>/2021/11/16/Algo-Greedy/</url>
    
    <content type="html"><![CDATA[<h1 id="Activity-Selection-problem"><a href="#Activity-Selection-problem" class="headerlink" title="Activity-Selection problem"></a>Activity-Selection problem</h1><p>pseudocode </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">Greedy-Activity-Selectors(s,f)<br>n = s.length<br>A = &#123;a[1]&#125;<br>k = 1<br>for m = 2 to n<br>if s[m] &gt;= f[k]<br>A = A ∪ &#123;a[m]&#125;<br>k = m<br>return A<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">act_select</span>(<span class="hljs-params">s,f</span>):<br>    n = <span class="hljs-built_in">len</span>(s)<br>    A = <span class="hljs-built_in">set</span>()<br>    A.add(<span class="hljs-number">1</span>)<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n):<br>        <span class="hljs-keyword">if</span> s[m] &gt;= f[k]:<br>            A.add(m)<br>            k = m<br>    <span class="hljs-keyword">return</span> A<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">12</span>]<br>    f = [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]<br>    <span class="hljs-built_in">print</span>(act_select(s,f))<br></code></pre></td></tr></table></figure><h1 id="The-Knapsack-problem"><a href="#The-Knapsack-problem" class="headerlink" title="The Knapsack problem"></a>The Knapsack problem</h1><h2 id="Fractional-Knapsack"><a href="#Fractional-Knapsack" class="headerlink" title="Fractional Knapsack"></a>Fractional Knapsack</h2><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">Fraction-Knapsack(v,w,W)<br>計算v[i]/w[i], ∀i = 1,2,...,n       =&gt; O(n)  <br>將每件物品根據v[i]/w[i]由大到小排列   =&gt; O(nlogn)<br>依序取物直到總負重達到W貨或物品全被取光為止<br></code></pre></td></tr></table></figure><h2 id="0-1-Knapsack-DP解"><a href="#0-1-Knapsack-DP解" class="headerlink" title="0-1 Knapsack (DP解)"></a>0-1 Knapsack (DP解)</h2><p>沒有greedy-choice property, 所以無法用greedy, 只能用DP解。<br>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">01-knapsack(n,v,w,W)<br>Let s[0..n, 0..W] be a new array<br>for k = 0 to W<br>s[0,k] = 0<br>for i = 0 to n <br>s[i,0] = 0<br>for k = 1 to W<br>if k &lt; w[i]<br>s[i,k] = s[i-1,k]<br>else<br>s[i,k] = max&#123;s[i-1,k], v[i]+s[i-1,k-w[i]]&#125;<br>return s[n,W]<br></code></pre></td></tr></table></figure><h1 id="Huffman-code"><a href="#Huffman-code" class="headerlink" title="Huffman code"></a>Huffman code</h1><p>pseucode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">Huffman(s)<br>find least frequence chars c and c&#x27;<br>S&#x27; = remove c and c&#x27; from S, but add char X with f[x] = f[c] + d[c&#x27;]<br>T&#x27; = Huffman(S&#x27;)<br>make leaf X of T&#x27; an interal node by connecting two leaves c and c&#x27; to it<br>return resulting tree<br></code></pre></td></tr></table></figure><p>constructing</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Huffman(c)<br>n ← |C|<br>Q ← C  # initialize the min-priority queue with the character in C<br>for i ← 1 to n-1<br>do allocate a new node z<br>z.left = x = EXTRACT-MIN(Q)<br>z.right = y = EXTRACT-MIN(Q)<br>z.freq = x.freq + y.freq<br>INSERT(Q,z)<br>return EXTRACT-MIN(Q) # return the root of the tree<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algo-DP</title>
    <link href="/2021/11/07/Algo-DP/"/>
    <url>/2021/11/07/Algo-DP/</url>
    
    <content type="html"><![CDATA[<h1 id="The-rod-cutting-problem-1-D"><a href="#The-rod-cutting-problem-1-D" class="headerlink" title="The rod-cutting problem (1-D)"></a>The rod-cutting problem (1-D)</h1><p>pseudocode </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Bottom-up-cut-rod(p,n)<br>let r[0..n] and s[0..n] be new arrays<br>r[0] ← 0<br>for j ← 1 to n do //compute r[j]<br>r[j] ← -∞<br>for i ← 1 to j do <br>  if r[j] &lt; p[i] + r[j-i]<br>  r[j] ← p[i] + r[j-i]<br>  s[j] ← i<br>return r and s<br></code></pre></td></tr></table></figure><p>in python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py">INF = <span class="hljs-number">1000000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rod</span>-cutting(p,n):<br>r = [<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>)<br>s = [<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>r[j] = -INF<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>):<br><span class="hljs-keyword">if</span> r[j] &lt; p[i] + r[j-i]:<br>r[j] = p[i] + r[j-i]<br>s[j] = i<br><span class="hljs-keyword">return</span> r, s<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p = [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">20</span>, <span class="hljs-number">22</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>]<br><span class="hljs-built_in">print</span>(rod-cutting(p,<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><h1 id="Matrix-chain-multiplication-2-D"><a href="#Matrix-chain-multiplication-2-D" class="headerlink" title="Matrix-chain multiplication (2-D)"></a>Matrix-chain multiplication (2-D)</h1><h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">Matrix-chain-order(p)    //bottom-up<br>for i ← 1 to n <br>m[i,i] = 0<br>for l ← 2 to n <br>for i ← 1 to n-l+1 do<br>j ← i+l-1<br>m[i,j] = ∞<br>for k ← i to j-1 do<br>q ← m[i,k] + m[k+1,j] + p[i-1]*p[k]*p[j]<br></code></pre></td></tr></table></figure><p>in python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py">INF = <span class="hljs-number">1000000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_chain</span>(<span class="hljs-params">p</span>):<br>n = <span class="hljs-built_in">len</span>(a)<br>m = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>s = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>        m[i][i] = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n-l+<span class="hljs-number">2</span>):<br>            j = i+l-<span class="hljs-number">1</span><br>            m[i][j] = INF<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,j):<br>                q = m[i][k] + m[k+<span class="hljs-number">1</span>][j] + p[i-<span class="hljs-number">1</span>]*p[k]*p[j]<br>                <span class="hljs-keyword">if</span> q &lt; m[i][j]:<br>                    m[i][j] = q<br>                    s[i][j] = k<br>                <span class="hljs-built_in">print</span>(m)<br>    <span class="hljs-keyword">return</span> m[n-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>a = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(matrix_chain(a))<br></code></pre></td></tr></table></figure><h2 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h2><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">Recursive-matrix-chain(p,i,j)   //Top-down<br>if i = j then return 0<br>m[i,j] = ∞<br>for k ← i to j-1 do<br>q ← Recursive-matrix-chain(p,i,k) <br>+ Recursive-matrix-chain(p,k+1,j) <br>+ p[i-1]*p[k]*p[j]<br>if q &lt; m[i,j] then m[i,j] ← q<br>return m[i,j]<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py">INF = <span class="hljs-number">1000000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_chain_recursive</span>(<span class="hljs-params">p,i,j</span>):<br>    n = <span class="hljs-built_in">len</span>(p)<br>    m = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    s = [[<span class="hljs-literal">None</span>] * n <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-keyword">if</span> i == j:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    m[i][j] = INF<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,j):<br>        q = matrix_chain_recursive(p,i,k) + matrix_chain_recursive(p,k+<span class="hljs-number">1</span>,j) \<br>            + p[i]*p[k+<span class="hljs-number">1</span>]*p[j+<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> q &lt; m[i][j]:<br>            m[i][j] = q<br>    <span class="hljs-keyword">return</span> m[i][j]<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>a = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>    b = <span class="hljs-built_in">len</span>(a)<br>    <span class="hljs-built_in">print</span>(matrix_chain_recursive(a,<span class="hljs-number">0</span>,b-<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">Memoized-matrix-chain(p)<br>for i ← 1 to n do<br>for j ← i to n do m[i,j] = ∞<br>return Look-up-chain(m,p,1,n)<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Look-up-chain(m,p,i,j)<br>if m[i,j] &lt; ∞ then return m[i,j]<br>if i == j then m[i,j] ← 0<br>else<br>for k ← i to j-1 do<br>q ← Look-up-chain(m,p,i,k) <br>+ Look-up-chain(m,p,k+1,j)<br>+ p[i-1]*p[k]*p[j]<br>if q &lt; m[i,j] then m[i,j] ← q<br>return m[i,j]  <br></code></pre></td></tr></table></figure><h1 id="Longest-common-subsequence-LCS"><a href="#Longest-common-subsequence-LCS" class="headerlink" title="Longest common subsequence (LCS)"></a>Longest common subsequence (LCS)</h1><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">LCS(X,Y)<br>m = X.length<br>n = Y.length<br>Let s[0..m,0..n], r[0..m,0..n] be new arrays<br>for i ← 0 to n<br>s[0,i] = 0<br>for i ← 1 to m<br>s[i,0] = 0<br>for j ← 1 to n<br>if x[i] == y[j]<br>s[i,j] = s[i-1,j-1]+1<br>r[i,j] = &quot;↖&quot;<br>else if s[i-1,j] ≧ s[i,j-1]   //上面優先<br>s[i,j] = s[i-1,j]<br>r[i,j] = &quot;↑&quot;<br>else s[i,j] = s[i,j-1]<br>r[i,j] = &quot;←&quot;<br>return s, r<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">LCS</span>(<span class="hljs-params">x,y</span>):<br>    m = <span class="hljs-built_in">len</span>(x)<br>    n = <span class="hljs-built_in">len</span>(y)<br>    s = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>)]<br>    r = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>        s[<span class="hljs-number">0</span>][i] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>        s[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> x[i-<span class="hljs-number">1</span>] == y[j-<span class="hljs-number">1</span>]:<br>                s[i][j] = s[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>                r[i][j] = <span class="hljs-string">&quot;↖&quot;</span><br>            <span class="hljs-keyword">elif</span> s[i-<span class="hljs-number">1</span>][j] &gt;= s[i][j-<span class="hljs-number">1</span>]: <span class="hljs-comment">#上面優先</span><br>                s[i][j] = s[i-<span class="hljs-number">1</span>][j]<br>                r[i][j] = <span class="hljs-string">&quot;↑&quot;</span><br>            <span class="hljs-keyword">else</span>: <br>                s[i][j] = s[i][j-<span class="hljs-number">1</span>]<br>                r[i][j] = <span class="hljs-string">&quot;←&quot;</span><br>    <span class="hljs-keyword">return</span> s, r<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    x = [<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span> ]<br>    y = [<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(LCS(x,y))<br></code></pre></td></tr></table></figure><h1 id="OBST"><a href="#OBST" class="headerlink" title="OBST"></a>OBST</h1><p>pseudocode</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">OBST(p,q,n)<br>let s[1..n+1,0..n], w[1..n+1,0..n], root[1..n,1..n]<br>for i ← 1 to n+1     //第一波斜線<br>s[i,i-1] = q[i-1]<br>w[i,i-1] = q[i-1]<br>for l ← 1 to n<br>for i ← 1 to n-l+1<br>j = i+l-1<br>s[i,j] = ∞<br>w[i,j] = w[i,j-1] + p[j] + q[j]<br>for r ← i to j<br>t = s[i,r-1] + s[r+1,j] + w[i,j]<br>if t &lt; s[i,j]<br>s[i,j] = t<br>root[i,j] = r<br>return s, root<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py">INF = <span class="hljs-number">100000</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">OBST</span>(<span class="hljs-params">p, q, n</span>):<br>    s = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>)]<br>    w = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>)]<br>    root = [[<span class="hljs-literal">None</span>] * (n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">2</span>):<br>        s[i][i-<span class="hljs-number">1</span>] = q[i-<span class="hljs-number">1</span>]<br>        w[i][i-<span class="hljs-number">1</span>] = q[i-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n-l+<span class="hljs-number">2</span>):<br>            j = i+l-<span class="hljs-number">1</span><br>            s[i][j] = INF<br>            w[i][j] = w[i][j-<span class="hljs-number">1</span>] + p[j] + q[j]<br>            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,j+<span class="hljs-number">1</span>):<br>                t = s[i][r-<span class="hljs-number">1</span>] + s[r+<span class="hljs-number">1</span>][j] + w[i][j]<br>                <span class="hljs-keyword">if</span> t &lt; s[i][j]:<br>                    s[i][j] = t<br>                    root[i][j] = r<br>    <span class="hljs-keyword">return</span> s, root<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = [<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]<br>    q = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>    n = <span class="hljs-built_in">len</span>(p) - <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(OBST(p, q, n))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROP</title>
    <link href="/2021/11/03/ROP/"/>
    <url>/2021/11/03/ROP/</url>
    
    <content type="html"><![CDATA[<h1 id="返回導向程式設計-Return-Oriented-Programming"><a href="#返回導向程式設計-Return-Oriented-Programming" class="headerlink" title="返回導向程式設計(Return-Oriented Programming)"></a>返回導向程式設計(Return-Oriented Programming)</h1><p>是電腦安全中的一種<a href="https://zh.wikipedia.org/wiki/Exploit">漏洞利用</a>技術，該技術允許攻擊者在程式啟用了安全保護技術（如<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%9F%B7%E8%A1%8C%E9%98%B2%E6%AD%A2">堆疊不可執行</a>）的情況下控制程式執行流，執行惡意程式碼。</p><p>其核心思想是通過stack overflow等方式控制stack呼叫以劫持程式控制流並執行針對性的機器語言指令序列（稱為<strong>Gadgets</strong>）。</p><p><strong>Gadgets</strong> ：以 <code>ret</code> (machine code: <code>c3</code>)為結尾的指令序列，通過這些指令序列，我們可以修改某些位址的內容，方便控制程式的執行流程。</p><p><code>ret</code> 指令相當於 <code>pop eip</code>。即，首先將 <code>esp</code> 指向的 4 字節内容讀取並assign给 <code>eip</code>，然後 <code>esp</code> 加上 4 字節指向stack的下一个位置。如果當前執行的指令序列仍然以 <code>ret</code> 指令结束，則這個過程將重複， <code>esp</code> 再次增加並且執行下一个指令序列。</p><p>資料防止執行(Data Execution Prevention, <strong>DEP</strong>)</p><p>是一組在<a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8">記憶體</a>上執行額外檢查的<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E4%BB%B6">硬體</a>和<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6">軟體</a><a href="https://zh.wikipedia.org/wiki/%E6%8A%80%E6%9C%AF">技術</a>，有助於防止<a href="https://zh.wikipedia.org/wiki/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6">惡意程式</a>碼在<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">系統</a>上執行。</p><h2 id="尋找gadgets"><a href="#尋找gadgets" class="headerlink" title="尋找gadgets"></a>尋找gadgets</h2><ol><li>在program中尋找所有c3(ret)字節。</li><li>向前搜索，看前面的字節是否包含一個有效指令，這裡可以指定最大搜索字節數，以獲得不同長度的gadgets。</li><li>紀錄我們找到的所有有效指令序列。</li></ol><p>理論上我们是可以這樣尋找 gadgets 的，但實際上有很多工具可以完成這個工作，如 ROPgadget，Ropper 等。更完整的搜索可以使用 <a href="http://ropshell.com/">http://ropshell.com/</a>。</p><h2 id="常用的-gadgets"><a href="#常用的-gadgets" class="headerlink" title="常用的 gadgets"></a><strong>常用的 gadgets</strong></h2><ul><li>保存stack數據到register<ul><li>將stack頂的數據pop並保存到register中，然後跳轉到新的stack位址。所以當返回位址被一個gadgets的位址覆蓋，程序將在返回位址後執行該指令序列。</li><li>如：<code>pop eax; ret</code></li></ul></li><li>保存memory數據到register<ul><li>將memory地址處的數據load到memeory中。</li><li>如：<code>mov ecx,[eax]; ret</code></li></ul></li><li>保存register數據到memory<ul><li>將register的值保存到内存地址處。</li><li>如：<code>mov [eax],ecx; ret</code></li></ul></li><li>算數和邏輯運算<ul><li>add, sub, mul, xor 等。</li><li>如：<code>add eax,ebx; ret</code>, <code>xor edx,edx; ret</code></li></ul></li><li>系統調用<ul><li>執行kernel中斷</li><li>如：<code>int 0x80; ret</code>, <code>call gs:[0x10]; ret</code></li></ul></li><li>會影響stack frame的gadgets<ul><li>這些 gadgets 會改變 ebp 的值，從而影響stack frame，在一些操作如 stack pivot 時我們需要這樣的指令来轉移stack frame。</li><li>如：<code>leave; ret</code>, <code>pop ebp; ret</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>John The Ripper</title>
    <link href="/2021/08/06/John-The-Ripper/"/>
    <url>/2021/08/06/John-The-Ripper/</url>
    
    <content type="html"><![CDATA[<h1 id="基本步驟："><a href="#基本步驟：" class="headerlink" title="基本步驟："></a>基本步驟：</h1><ol><li>如果要破解hash的話，要先判斷是哪種hash<br> a. 可以利用網路資源-<a href="https://hashes.com/en/tools/hash_identifier">Hashes.com</a><br> b. 或是使用python工具-<a href="https://pypi.org/project/hashID/">hashid</a><blockquote><p>hashid.py 使用方式<br> 可直接 <code>python3 hash-id.py</code>輸入<br> 也可以 <code>cat hash.txt | hash-identifier</code> 這種方式輸入</p></blockquote><p> c. 也可以自己用比對(<code>Ctrl-f</code>)的方式：<br> <a href="https://hashcat.net/wiki/doku.php?id=example_hashes" title="hashcat.net">hash表</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Learning Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CyberSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2-Kali 使用 msf 資料庫的錯誤解決</title>
    <link href="/2021/07/02/WSL2-Kali-%E4%BD%BF%E7%94%A8-msf-%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%A7%A3%E6%B1%BA/"/>
    <url>/2021/07/02/WSL2-Kali-%E4%BD%BF%E7%94%A8-msf-%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%A7%A3%E6%B1%BA/</url>
    
    <content type="html"><![CDATA[<p>參考<a href="https://xunmi.blog.csdn.net/article/details/108809948?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-14.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-14.control" title="CSDN">這位的博客</a></p><p>第一次設置完之後，以後要用之前需先啟用該資料庫：<code>sudo service postgresql start</code></p><p>可以看一下狀態：<code>sudo service postgresql status</code></p><p>然後再進<code>msfconsole</code></p><p>連接你的資料庫：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">db_connect 資料庫用戶名:資料庫密碼@資料庫ip[:資料庫port]/資料庫名<br><br><span class="hljs-comment"># e.g. db_connect xiung:root@127.0.0.1/msf</span><br></code></pre></td></tr></table></figure><p><img src="/./../img/20210702.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>Environment stuff</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
      <tag>database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2安裝kali 記錄</title>
    <link href="/2021/07/01/WSL2%E5%AE%89%E8%A3%9Dkali-%E8%A8%98%E9%8C%84/"/>
    <url>/2021/07/01/WSL2%E5%AE%89%E8%A3%9Dkali-%E8%A8%98%E9%8C%84/</url>
    
    <content type="html"><![CDATA[<p>從安裝到GUI設置、rdp，可參考這位NetworkChuck大大的<a href="https://www.youtube.com/watch?v=AfVH54edAHU&t=221s">影片</a>，一步一步帶你做到好。</p><p>文字教學可參考kali的<a href="https://www.kali.org/docs/wsl/win-kex/">官方網站</a>，裡面還有包含一個win-kex的圖形介面(的樣子，我沒有用所以不太清楚)。</p><p>用過之後會發現這個kali不是完整版的，有很多工具都沒有安裝，所以可以額外安裝一下工具包，上網查了一下有發現幾種包，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#完整版(個人是用這個)</span><br>sudo apt install -y kali-linux-large <br><br><span class="hljs-comment">#核心版</span><br>sudo apt install -y kali-linux-default<br><br><span class="hljs-comment">#完完整版(?</span><br>sudo apt install -y kali-linux-everything<br></code></pre></td></tr></table></figure><p>補充<a href="https://www.kali.org/blog/major-metapackage-makeover/">官網說法</a>:</p><p><img src="/./../img/20210701_1.png"></p><p><img src="/./../img/20210701_2.png"></p><p>開啟遠端連線指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 開啟遠端程式</span><br>sudo service xrdp start<br><br><span class="hljs-comment"># 查詢ip</span><br>ip addr<br></code></pre></td></tr></table></figure><p>然後，紀錄一下以後可能會用到的其他參考資料:</p><p><a href="https://zhuanlan.zhihu.com/p/263658960">WSL2優化</a></p><p>WSL2解除安裝:</p><p><a href="https://www.itread01.com/p/1383209.html">Win10 linux子系統解除安裝方法</a></p><p><a href="https://pureinfotech.com/uninstall-wsl2-windows-10/">How to uninstall WSL2 on Windows 10 * Pureinfotech</a></p><p><a href="https://blog.csdn.net/qq_39611230/article/details/108675915">中文化(?</a></p>]]></content>
    
    
    <categories>
      
      <category>Environment stuff</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
